setwd("D:/workspace/JP8_Demand_Forecast1081102")
# Load required packages
library(xts)
setwd("D:/workspace/JP8_Demand_Forecast1081102")
install.packages("xts")
install.packages("xts")
install.packages("ggplot2")
install.packages("forecast")
install.packages("readxl")
# Load required packages
library(xts)
library(ggplot2)
library(forecast)
library(readxl)
# Data Preparation & Exploratory data analysis
# Loading data into memory
df <- read_excel("AirDissel.xlsx", sheet=1 ,na="NA")
View(df)
str(df)
# JP8 Demand Forecasting Model
#設定路線
setwd("D:/workspace/JP8_Demand_Forecast1081102")
# Load required packages
library(xts)
library(ggplot2)
library(forecast)
library(readxl)
# Data Preparation & Exploratory data analysis
# Loading data into memory
df <- read_excel("AirDissel.xlsx", sheet=1 ,na="NA")
View(df)
str(df)
# Day of the week 增加星期的欄位
df$day <- as.factor(strftime(df$date, format = '%A'))
str(df)
View(df)
# Final structure for the study
str(df)
#最低耗油量及最高耗油料數據，中位數及平均數 Mean中位數 Median，四分位及標準差
summary(df)
# Data preparation for model evaluation later
# The last 20% of dataset is extracted into "test" dataset by time stamp '10-01-2017'
#切割資料，分為訓練集以及測試集
df_test <- subset(df, date >= strptime('01-10-2017', format = '%d-%m-%Y'))
df <- subset(df, date < strptime('01-10-2017', format = '%d-%m-%Y'))
ts <- ts(df$demand, frequency = 1)
# A time series plot helps visualizing the demand evolution across the time period
# Dataframe and time series objects
demandts <- xts(df$demand, df$date)
plot(demandts, main = 'JP8 demand evolution', xlab = 'Date', ylab = 'Demand (GL)')
hist(demandts, col="yellow", xlab="", main="")
# Demand by day of the week
ggplot(df, aes(day, demand)) + geom_boxplot() + xlab('Day') + ylab('Demand (GL)') + ggtitle('Demand per day of the week')
# Aggregating demand by day of the year (average)
avg_demand_per_yearday <- aggregate(demand ~ yearday, df, 'mean')
# JP8 Demand Forecasting Model
#設定路線
setwd("D:/workspace/JP8_Demand_Forecast1081102")
# JP8 Demand Forecasting Model
#設定路線
setwd("D:/R語言/workspace/程式練習")
# JP8 Demand Forecasting Model
#設定路線
setwd("D:/R語言/workspace/程式練習")
# Load required packages
library(xts)
# Load required packages
library(xts)
# JP8 Demand Forecasting Model
#設定路線
setwd("D:/R語言/workspace/程式練習")
# Load required packages
library(xts)
library(ggplot2)
library(forecast)
library(readxl)
# Data Preparation & Exploratory data analysis
# Loading data into memory
df <- read_excel("AirDissel.xlsx", sheet=1 ,na="NA")
View(df)
# Day of the week 增加星期的欄位(將資料取出來轉換成星期)
df$day <- as.factor(strftime(df$date, format = '%A'))
str(df)
# Day of the year(挑出月日變成一串數字)
df$yearday <- as.factor(strftime(df$date, format = '%m%d'))
# Final structure for the study
str(df)
#最低耗油量及最高耗油料數據，中位數及平均數 Mean中位數 Median，四分位及標準差
summary(df)
#畫成圖表
plot(df$demand)
boxplot(df$demand)
# Data preparation for model evaluation later
# The last 20% of dataset is extracted into "test" dataset by time stamp '10-01-2017'
#切割資料，分為訓練集以及測試集
df_test <- subset(df, date >= strptime('01-10-2017', format = '%d-%m-%Y'))
df <- subset(df, date < strptime('01-10-2017', format = '%d-%m-%Y'))
ts <- ts(df$demand, frequency = 1)
# A time series plot helps visualizing the demand evolution across the time period
# Dataframe and time series objects
demandts <- xts(df$demand, df$date)
plot(demandts, main = 'JP8 demand evolution', xlab = 'Date', ylab = 'Demand (GL)')
hist(demandts, col="yellow", xlab="", main="")
# Demand by day of the week
ggplot(df, aes(day, demand)) + geom_boxplot() + xlab('Day') + ylab('Demand (GL)') + ggtitle('Demand per day of the week')
# Aggregating demand by day of the year (average)
avg_demand_per_yearday <- aggregate(demand ~ yearday, df, 'mean')
# Computing the smooth curve for the time series. Data is replicated before computing the curve in order to achieve continuity
smooth_yearday <- rbind(avg_demand_per_yearday, avg_demand_per_yearday, avg_demand_per_yearday, avg_demand_per_yearday, avg_demand_per_yearday)
smooth_yearday <- lowess(smooth_yearday$demand, f = 1 / 45)
l <- length(avg_demand_per_yearday$demand)
l0 <- 2 * l + 1
l1 <- 3 * l
smooth_yearday <- smooth_yearday$y[l0:l1]
#  ACF and PACF
par(mfrow = c(1, 2))
acf(avg_demand_per_yearday, 100, main = 'Autocorrelation')
pacf(avg_demand_per_yearday, 100, main = 'Partial autocorrelation')
# Plotting the result
par(mfrow = c(1, 1))
# Setting year to 2016 to allow existence of 29th February
dates <- as.Date(paste(levels(df$yearday), '2016'), format = '%m%d%Y')
plot(dates, avg_demand_per_yearday$demand, type = 'l', main = 'Average daily demand', xlab = 'Date', ylab = 'Demand (GL)')
lines(dates, smooth_yearday, col = 'blue', lwd = 2)
# The graphics bellow show the errors. Notice how the biggest errors are all negative
par(mfrow = c(1, 2))
diff <- avg_demand_per_yearday$demand - smooth_yearday
abs_diff <- abs(diff)
barplot(diff[order(-abs_diff)], main = 'Smoothing error', ylab = 'Error')
boxplot(diff, main = 'Smoothing error', ylab = 'Error')
head(strftime(dates[order(-abs_diff)], format = '%B %d'), 10)
#p值遠小於0.05，因此我們拒絕了虛無假設，非定態，帶有趨勢
Box.test(df$demand)
# Further analysis
# Decomposition of the weekly seasonal time series
wts <- ts(ts, frequency = 7)
dec_wts <- decompose(wts)
plot(dec_wts)
# Demand minus week seasonal
df$demand_mws <- df$demand - as.numeric(dec_wts$season)
# Decomposition of the yearly seasonal time series
yts <- ts(subset(df, yearday != '0229')$demand_mws, frequency = 365)
dec_yts <- decompose(yts)
plot(dec_yts)
days365 <- which(df$yearday != '0229')
february29ths <- which(df$yearday == '0229')
df$demand_mwys[days365] <- df$demand_mws[days365] - as.numeric(dec_yts$season)
# Fill values on February 29th
df$demand_mwys[february29ths] <- df$demand_mws[february29ths]
df$demand_mwys[days365] <- df$demand_mws[days365] - as.numeric(dec_yts$season)
# Fill values on February 29th
df$demand_mwys[february29ths] <- df$demand_mws[february29ths]
# A new time series is formed out of the original observation minus the weekly and the yearly seasonal data
par(mfrow = c(1, 1))
ts_mwys <- ts(df$demand_mwys, frequency = 1)
demandts_mwys <- xts(df$demand_mwys, df$date)
plot(demandts_mwys, main = 'JP8 demand minus seasonal data', xlab = 'Date', ylab = 'Demand (GL)')
ded1 = diff(demandts_mwys, differences = 1)
par(mfrow = c(2, 1))
plot(demandts, main = 'JP8 demand evolution', xlab = 'Date', ylab = 'Demand (GL)')
plot(ded1, main = 'diff JP8 demand evolution', xlab = 'Date', ylab = 'Demand (GL)')
#拒絕零假設，並將其分類為定態
tseries::adf.test(df$demand)
plot(ded1, main = 'diff JP8 demand evolution', xlab = 'Date', ylab = 'Demand (GL)')
#拒絕零假設，並將其分類為定態
tseries::adf.test(df$demand)
